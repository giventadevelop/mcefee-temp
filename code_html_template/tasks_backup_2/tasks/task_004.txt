# Task ID: 4
# Title: Implement admin event CRUD operations
# Status: pending
# Dependencies: 1 ✅, 2 ✅, 3 ⏱️
# Priority: high
# Description: Create API routes and admin interface for creating, reading, updating, and deleting events.
# Details:
- Create event form component with all required fields
- Implement API routes for event CRUD operations
- Add event cancellation functionality (setting active to false)
- Implement form validation
- Add date/time picker for event scheduling
- Create event list view for admin dashboard
- Add event detail view for editing
Here is a schema for the events
CREATE TABLE public.event (
    id SERIAL PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    caption VARCHAR(500), -- Short catchy description
    description TEXT,
    event_type_id INTEGER NOT NULL REFERENCES public.event_type(id),
    start_date DATE NOT NULL,
    end_date DATE NOT NULL,
    start_time TIME NOT NULL,
    end_time TIME NOT NULL,
    location VARCHAR(255),
    directions_to_venue TEXT, -- Navigational directions to the venue
    capacity INTEGER,
    admission_type VARCHAR(50) NOT NULL, -- 'free' or 'ticketed'
    is_active BOOLEAN DEFAULT TRUE, -- Indicates if the event is active or archived/canceled
    created_by VARCHAR(255) NOT NULL REFERENCES public.user_profile(user_id), -- Updated reference
    created_at TIMESTAMP NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMP NOT NULL DEFAULT NOW()
);
The admin page src\app\admin\page.tsx is already implemented with minimum details. Here is the rest api schema

"/api/events": {
      "get": {
        "tags": [
          "event-resource"
        ],
        "operationId": "getAllEvents",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Zero-based page index (0..N)",
            "required": false,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "The size of the page to be returned",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventDTO"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "event-resource"
        ],
        "operationId": "createEvent",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/event-types": {
      "get": {
        "tags": [
          "event-type-resource"
        ],
        "operationId": "getAllEventTypes",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Zero-based page index (0..N)",
            "required": false,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "The size of the page to be returned",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventTypeDTO"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "event-type-resource"
        ],
        "operationId": "createEventType",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventTypeDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventTypeDTO"
                }
              }
            }
          }
        }
      }
    }

"EventTypeDTO": {
        "required": [
          "createdAt",
          "id",
          "name",
          "updatedAt"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      }

# Test Strategy:
Test creating, updating, retrieving, and deleting events. Verify form validation works correctly.
