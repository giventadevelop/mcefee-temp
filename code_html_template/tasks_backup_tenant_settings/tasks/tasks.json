{
  "meta": {
    "projectName": "nextjs-template",
    "version": "1.5.0",
    "source": ".task-master/PRD.txt",
    "description": "Tasks generated from PRD",
    "totalTasksGenerated": 30,
    "tasksIncluded": 30
  },
  "tasks": [
    {
      "id": 1,
      "title": "Set up file structure for tenant management module",
      "description": "Create the directory structure and empty files for the tenant management module following the technical requirements.",
      "status": "pending",
      "dependencies": [],
      "priority": "high",
      "details": "Create the following directory structure and empty files:\n- src/app/admin/tenant-management/\n  - organizations/\n    - page.tsx\n    - [id]/\n      - page.tsx\n      - edit/\n        - page.tsx\n      - settings/\n        - page.tsx\n    - new/\n      - page.tsx\n    - ApiServerActions.ts\n  - settings/\n    - page.tsx\n    - [id]/\n      - page.tsx\n      - edit/\n        - page.tsx\n    - new/\n      - page.tsx\n    - ApiServerActions.ts\n  - components/\n    - TenantOrganizationForm.tsx\n    - TenantSettingsForm.tsx\n    - TenantOrganizationList.tsx\n    - TenantSettingsList.tsx\n    - TenantDetailsModal.tsx",
      "testStrategy": "Verify that all directories and files are created with the correct structure and naming."
    },
    {
      "id": 2,
      "title": "Create TypeScript interfaces for DTOs",
      "description": "Define TypeScript interfaces for TenantOrganizationDTO and TenantSettingsDTO based on the PRD specifications.",
      "status": "pending",
      "dependencies": [
        1
      ],
      "priority": "high",
      "details": "Create a types.ts file in the tenant-management directory with the following interfaces:\n\n1. TenantOrganizationDTO interface with all fields specified in the PRD\n2. TenantSettingsDTO interface with all fields specified in the PRD\n3. Add any additional helper types or interfaces needed for form validation",
      "testStrategy": "Verify that the interfaces match the specifications in the PRD and include all required fields with proper types."
    },
    {
      "id": 3,
      "title": "Implement API proxy routes for tenant organizations",
      "description": "Create API proxy handlers for tenant organization endpoints following nextjs_api_routes patterns.",
      "status": "pending",
      "dependencies": [
        2
      ],
      "priority": "high",
      "details": "Implement API proxy routes for the following tenant organization endpoints:\n- GET /api/tenant-organizations\n- GET /api/tenant-organizations/{id}\n- POST /api/tenant-organizations\n- PUT /api/tenant-organizations/{id}\n- PATCH /api/tenant-organizations/{id}\n- DELETE /api/tenant-organizations/{id}\n\nEnsure proper JWT authentication and tenant ID injection. Use fetchWithJwtRetry for backend API calls.",
      "testStrategy": "Test each API endpoint to ensure it correctly communicates with the backend and handles authentication properly."
    },
    {
      "id": 4,
      "title": "Implement API proxy routes for tenant settings",
      "description": "Create API proxy handlers for tenant settings endpoints following nextjs_api_routes patterns.",
      "status": "pending",
      "dependencies": [
        2
      ],
      "priority": "high",
      "details": "Implement API proxy routes for the following tenant settings endpoints:\n- GET /api/tenant-settings\n- GET /api/tenant-settings/{id}\n- POST /api/tenant-settings\n- PUT /api/tenant-settings/{id}\n- PATCH /api/tenant-settings/{id}\n- DELETE /api/tenant-settings/{id}\n\nEnsure proper JWT authentication and tenant ID injection. Use fetchWithJwtRetry for backend API calls.",
      "testStrategy": "Test each API endpoint to ensure it correctly communicates with the backend and handles authentication properly."
    },
    {
      "id": 5,
      "title": "Implement server actions for tenant organizations",
      "description": "Create server actions for CRUD operations on tenant organizations.",
      "status": "pending",
      "dependencies": [
        3
      ],
      "priority": "high",
      "details": "In the organizations/ApiServerActions.ts file, implement the following server actions:\n- fetchTenantOrganizations(page, pageSize, filters)\n- fetchTenantOrganization(id)\n- createTenantOrganization(data)\n- updateTenantOrganization(id, data)\n- deleteTenantOrganization(id)\n- toggleTenantOrganizationStatus(id, isActive)\n\nInclude proper error handling, logging, and use withTenantId utility for DTO preparation.",
      "testStrategy": "Test each server action to ensure it correctly interacts with the API proxy routes and handles errors appropriately."
    },
    {
      "id": 6,
      "title": "Implement server actions for tenant settings",
      "description": "Create server actions for CRUD operations on tenant settings.",
      "status": "pending",
      "dependencies": [
        4
      ],
      "priority": "high",
      "details": "In the settings/ApiServerActions.ts file, implement the following server actions:\n- fetchTenantSettings(page, pageSize, filters)\n- fetchTenantSetting(id)\n- createTenantSetting(data)\n- updateTenantSetting(id, data)\n- deleteTenantSetting(id)\n\nInclude proper error handling, logging, and use withTenantId utility for DTO preparation.",
      "testStrategy": "Test each server action to ensure it correctly interacts with the API proxy routes and handles errors appropriately."
    },
    {
      "id": 7,
      "title": "Create TenantOrganizationList component",
      "description": "Implement the list view component for tenant organizations with pagination, filtering, and sorting.",
      "status": "pending",
      "dependencies": [
        5
      ],
      "priority": "medium",
      "details": "Create the TenantOrganizationList component with the following features:\n- Paginated table display\n- Columns for key information (organization name, domain, contact email, subscription status, is_active)\n- Search/filter functionality by organization name, domain, or contact email\n- Sorting by organization name, created date, or subscription status\n- Action buttons for View, Edit, Delete, Toggle Active Status\n- Loading states and error handling",
      "testStrategy": "Test the component with various data sets to ensure pagination, filtering, and sorting work correctly. Verify that all action buttons function as expected."
    },
    {
      "id": 8,
      "title": "Create TenantSettingsList component",
      "description": "Implement the list view component for tenant settings with pagination, filtering, and sorting.",
      "status": "pending",
      "dependencies": [
        6
      ],
      "priority": "medium",
      "details": "Create the TenantSettingsList component with the following features:\n- Paginated table display\n- Columns for key information (tenant_id, allow_user_registration, enable_whatsapp_integration, max_events_per_month)\n- Search/filter functionality by tenant_id\n- Sorting by tenant_id, created date\n- Action buttons for View, Edit, Delete\n- Loading states and error handling",
      "testStrategy": "Test the component with various data sets to ensure pagination, filtering, and sorting work correctly. Verify that all action buttons function as expected."
    },
    {
      "id": 9,
      "title": "Implement TenantOrganizationForm component",
      "description": "Create a reusable form component for creating and editing tenant organizations.",
      "status": "pending",
      "dependencies": [
        2,
        5
      ],
      "priority": "medium",
      "details": "Implement the TenantOrganizationForm component with:\n- Form fields for all tenant organization properties\n- Color picker for primary and secondary colors\n- File upload for logo with preview\n- Date pickers for subscription dates\n- Client-side validation using React Hook Form\n- Real-time validation for unique constraints\n- Clear error messages and field highlighting\n- Support for both create and edit modes",
      "testStrategy": "Test the form with valid and invalid inputs to ensure validation works correctly. Verify that the form correctly handles both create and edit operations."
    },
    {
      "id": 10,
      "title": "Implement TenantSettingsForm component",
      "description": "Create a reusable form component for creating and editing tenant settings.",
      "status": "pending",
      "dependencies": [
        2,
        6
      ],
      "priority": "medium",
      "details": "Implement the TenantSettingsForm component with:\n- Form fields for all tenant settings properties\n- Toggle switches for boolean fields\n- Number inputs with validation for numeric fields\n- Text areas for custom CSS/JS with syntax highlighting\n- JSON editor for email provider configuration\n- Client-side validation using React Hook Form\n- Clear error messages and field highlighting\n- Support for both create and edit modes\n- Tenant organization selection dropdown",
      "testStrategy": "Test the form with valid and invalid inputs to ensure validation works correctly. Verify that the form correctly handles both create and edit operations."
    },
    {
      "id": 11,
      "title": "Implement TenantDetailsModal component",
      "description": "Create a modal component for displaying detailed information about tenant organizations and settings.",
      "status": "pending",
      "dependencies": [
        2
      ],
      "priority": "low",
      "details": "Implement the TenantDetailsModal component with:\n- Read-only view of complete tenant information\n- Display of related tenant data (organization â†” settings)\n- Creation and modification timestamps\n- Action buttons for Edit, Delete, Manage Settings\n- Responsive design for different screen sizes",
      "testStrategy": "Verify that the modal correctly displays all tenant information and that action buttons work as expected."
    },
    {
      "id": 12,
      "title": "Implement tenant organizations list page",
      "description": "Create the main page for displaying the list of tenant organizations.",
      "status": "pending",
      "dependencies": [
        7
      ],
      "priority": "medium",
      "details": "Implement the organizations/page.tsx with:\n- Page title and description\n- TenantOrganizationList component\n- Create new button\n- Breadcrumb navigation\n- Integration with admin layout\n- Error handling and loading states",
      "testStrategy": "Test the page to ensure it correctly displays the list of tenant organizations and that navigation elements work as expected."
    },
    {
      "id": 13,
      "title": "Implement tenant settings list page",
      "description": "Create the main page for displaying the list of tenant settings.",
      "status": "pending",
      "dependencies": [
        8
      ],
      "priority": "medium",
      "details": "Implement the settings/page.tsx with:\n- Page title and description\n- TenantSettingsList component\n- Create new button\n- Breadcrumb navigation\n- Integration with admin layout\n- Error handling and loading states",
      "testStrategy": "Test the page to ensure it correctly displays the list of tenant settings and that navigation elements work as expected."
    },
    {
      "id": 14,
      "title": "Implement tenant organization create page",
      "description": "Create the page for adding a new tenant organization.",
      "status": "pending",
      "dependencies": [
        9
      ],
      "priority": "medium",
      "details": "Implement the organizations/new/page.tsx with:\n- Page title and description\n- TenantOrganizationForm component in create mode\n- Submit and cancel buttons\n- Breadcrumb navigation\n- Form submission handling\n- Success and error notifications\n- Redirect after successful creation",
      "testStrategy": "Test the create functionality with valid and invalid data to ensure proper validation and submission handling."
    },
    {
      "id": 15,
      "title": "Implement tenant settings create page",
      "description": "Create the page for adding new tenant settings.",
      "status": "pending",
      "dependencies": [
        10
      ],
      "priority": "medium",
      "details": "Implement the settings/new/page.tsx with:\n- Page title and description\n- TenantSettingsForm component in create mode\n- Submit and cancel buttons\n- Breadcrumb navigation\n- Form submission handling\n- Success and error notifications\n- Redirect after successful creation",
      "testStrategy": "Test the create functionality with valid and invalid data to ensure proper validation and submission handling."
    },
    {
      "id": 16,
      "title": "Implement tenant organization view page",
      "description": "Create the page for viewing detailed information about a tenant organization.",
      "status": "pending",
      "dependencies": [
        5,
        11
      ],
      "priority": "medium",
      "details": "Implement the organizations/[id]/page.tsx with:\n- Fetching and displaying organization details\n- Read-only view of complete information\n- Display of related tenant settings if available\n- Action buttons for Edit, Delete, Manage Settings\n- Breadcrumb navigation\n- Loading states and error handling",
      "testStrategy": "Test the page with various tenant organizations to ensure all information is displayed correctly and that action buttons work as expected."
    },
    {
      "id": 17,
      "title": "Implement tenant settings view page",
      "description": "Create the page for viewing detailed information about tenant settings.",
      "status": "pending",
      "dependencies": [
        6,
        11
      ],
      "priority": "medium",
      "details": "Implement the settings/[id]/page.tsx with:\n- Fetching and displaying settings details\n- Read-only view of complete information\n- Display of associated tenant organization details\n- Action buttons for Edit, Delete\n- Breadcrumb navigation\n- Loading states and error handling",
      "testStrategy": "Test the page with various tenant settings to ensure all information is displayed correctly and that action buttons work as expected."
    },
    {
      "id": 18,
      "title": "Implement tenant organization edit page",
      "description": "Create the page for editing an existing tenant organization.",
      "status": "pending",
      "dependencies": [
        9,
        16
      ],
      "priority": "medium",
      "details": "Implement the organizations/[id]/edit/page.tsx with:\n- Fetching organization data\n- TenantOrganizationForm component in edit mode\n- Pre-populated form fields\n- Submit and cancel buttons\n- Form submission handling\n- Success and error notifications\n- Redirect after successful update",
      "testStrategy": "Test the edit functionality with valid and invalid data to ensure proper validation and submission handling."
    },
    {
      "id": 19,
      "title": "Implement tenant settings edit page",
      "description": "Create the page for editing existing tenant settings.",
      "status": "pending",
      "dependencies": [
        10,
        17
      ],
      "priority": "medium",
      "details": "Implement the settings/[id]/edit/page.tsx with:\n- Fetching settings data\n- TenantSettingsForm component in edit mode\n- Pre-populated form fields\n- Submit and cancel buttons\n- Form submission handling\n- Success and error notifications\n- Redirect after successful update",
      "testStrategy": "Test the edit functionality with valid and invalid data to ensure proper validation and submission handling."
    },
    {
      "id": 20,
      "title": "Implement organization settings management page",
      "description": "Create the page for managing settings related to a specific tenant organization.",
      "status": "pending",
      "dependencies": [
        6,
        10,
        16
      ],
      "priority": "medium",
      "details": "Implement the organizations/[id]/settings/page.tsx with:\n- Fetching organization and related settings data\n- Display of organization summary\n- TenantSettingsForm component for editing related settings\n- Create new settings if none exist\n- Submit and cancel buttons\n- Form submission handling\n- Success and error notifications",
      "testStrategy": "Test the page with organizations that have and don't have settings to ensure proper handling of both scenarios."
    },
    {
      "id": 21,
      "title": "Implement bulk operations for tenant organizations",
      "description": "Add functionality for bulk operations on tenant organizations (delete, status updates).",
      "status": "pending",
      "dependencies": [
        12,
        5
      ],
      "priority": "low",
      "details": "Enhance the TenantOrganizationList component to support:\n- Selection of multiple organizations\n- Bulk delete action\n- Bulk status update (activate/deactivate)\n- Confirmation dialogs for destructive actions\n- Success and error notifications for bulk operations",
      "testStrategy": "Test bulk operations with various selections to ensure they function correctly and provide appropriate feedback."
    },
    {
      "id": 22,
      "title": "Implement bulk operations for tenant settings",
      "description": "Add functionality for bulk operations on tenant settings (delete).",
      "status": "pending",
      "dependencies": [
        13,
        6
      ],
      "priority": "low",
      "details": "Enhance the TenantSettingsList component to support:\n- Selection of multiple settings\n- Bulk delete action\n- Confirmation dialogs for destructive actions\n- Success and error notifications for bulk operations",
      "testStrategy": "Test bulk operations with various selections to ensure they function correctly and provide appropriate feedback."
    },
    {
      "id": 23,
      "title": "Implement export functionality for tenant data",
      "description": "Add functionality to export tenant organization and settings data.",
      "status": "pending",
      "dependencies": [
        12,
        13
      ],
      "priority": "low",
      "details": "Add export buttons to list pages that allow exporting data in CSV or JSON format:\n- Export all data or selected records\n- Include all relevant fields\n- Handle large datasets appropriately\n- Provide download of exported file",
      "testStrategy": "Test export functionality with various data sets to ensure correct formatting and handling of different export scenarios."
    },
    {
      "id": 24,
      "title": "Implement advanced search and filtering",
      "description": "Enhance search and filtering capabilities for tenant management.",
      "status": "pending",
      "dependencies": [
        12,
        13
      ],
      "priority": "low",
      "details": "Enhance the list components with advanced search and filtering:\n- Filter by multiple criteria simultaneously\n- Save and load filter presets\n- Clear all filters option\n- More granular date range filtering\n- Server-side filtering for performance",
      "testStrategy": "Test advanced search and filtering with various criteria to ensure correct results are displayed."
    },
    {
      "id": 25,
      "title": "Add tenant management section to admin navigation",
      "description": "Update the admin navigation to include the tenant management section.",
      "status": "pending",
      "dependencies": [
        12,
        13
      ],
      "priority": "medium",
      "details": "Update the admin navigation component to include:\n- Tenant Management section\n- Sub-links for Organizations and Settings\n- Active state highlighting\n- Proper routing to tenant management pages",
      "testStrategy": "Verify that the navigation correctly links to tenant management pages and highlights the active section."
    },
    {
      "id": 26,
      "title": "Implement responsive design for all pages",
      "description": "Ensure all tenant management pages are responsive and work well on various devices.",
      "status": "pending",
      "dependencies": [
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20
      ],
      "priority": "medium",
      "details": "Test and adjust all pages for responsive behavior:\n- Mobile-friendly layouts\n- Tablet adaptations\n- Desktop optimizations\n- Responsive tables with horizontal scrolling or card views\n- Touch-friendly controls for mobile devices",
      "testStrategy": "Test all pages on various device sizes to ensure they display and function correctly."
    },
    {
      "id": 27,
      "title": "Implement comprehensive error handling",
      "description": "Ensure robust error handling throughout the tenant management module.",
      "status": "pending",
      "dependencies": [
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20
      ],
      "priority": "high",
      "details": "Implement comprehensive error handling:\n- User-friendly error messages\n- Graceful degradation for non-critical features\n- Detailed error logging for debugging\n- Retry mechanisms for transient errors\n- Fallback UI for critical errors",
      "testStrategy": "Test error scenarios by simulating various error conditions and verifying appropriate handling and messaging."
    },
    {
      "id": 28,
      "title": "Implement loading states and skeleton screens",
      "description": "Add loading indicators and skeleton screens for better user experience during data fetching.",
      "status": "pending",
      "dependencies": [
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20
      ],
      "priority": "medium",
      "details": "Implement loading states and skeleton screens:\n- Skeleton loaders for list views\n- Loading spinners for form submissions\n- Placeholder content during data fetching\n- Smooth transitions between loading and loaded states\n- Feedback for long-running operations",
      "testStrategy": "Test loading states by simulating various network conditions and verifying appropriate loading indicators are displayed."
    },
    {
      "id": 29,
      "title": "Write unit tests for form validation",
      "description": "Create unit tests for form validation logic in the tenant management forms.",
      "status": "pending",
      "dependencies": [
        9,
        10
      ],
      "priority": "medium",
      "details": "Write unit tests for:\n- Required field validation\n- Format validation (email, phone, URL)\n- Numeric constraints validation\n- Date validation\n- Unique constraint validation\n- Conditional validation logic",
      "testStrategy": "Run unit tests to verify that all validation rules work correctly with various input scenarios."
    },
    {
      "id": 30,
      "title": "Write integration tests for CRUD workflows",
      "description": "Create integration tests for complete CRUD workflows for tenant management.",
      "status": "pending",
      "dependencies": [
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20
      ],
      "priority": "medium",
      "details": "Write integration tests for:\n- Creating new tenant organizations and settings\n- Viewing tenant details\n- Editing tenant information\n- Deleting tenant records\n- Relationship management between organizations and settings\n- Error scenarios and edge cases",
      "testStrategy": "Run integration tests to verify that complete workflows function correctly from end to end."
    }
  ]
}